name: 'Run checks against DBT Models'
description: 'Compares columns and rows in BigQuery.'
inputs:
  GCP_TOKEN:
    description: 'The GCP Key used to connect to BQ'
    required: true
    default: 'abcd'
  GH_TOKEN:
    description: 'The PAT to Comment on PRs'
    required: true
    default: '1234'
  PR_NUMBER:
    description: 'The PR to Comment on'
    required: true
    default: '${{ github.event.number }}'
  GH_REPO:
    description: 'The Github Repository'
    required: true
    default: '${{ github.repository }}'
  GH_ORG:
    description: 'The Github Repository Owner'
    required: true
    default: '${{ github.repository_owner }}'
  WORK_DIR:
    description: "The fullpath to dbt workspace"
    required: true
    default: '${{ github.workspace }}'
  DBT_PROFILE_FILE:
    description: 'The fullpath to dbt profile (needs to exist in repo)'
    required: true
    default: "helpers/profiles.yml"
  manifest_file:
    description: "The fullpath to dbt's compiled manifest file."
    required: true
    default: "results/manifest.json"
  project_id:
    description: 'The BigQuery Project ID'
    required: true
    default: "my-bq-project"
  dev_prefix:
    description: 'The schema prefix used by dbt on dev datasets'
    required: true
    default: "dev_"
  prod_prefix:
    description: 'The schema prefix used by dbt on prod datasets'
    required: true
    default: "prod_"
  fallback_prefix:
    description: 'An alternative schema prefix used by a select few prod datasets'
    required: true
    default: ""
  ignored_schemas:
    description: 'Schemas which do not have a prod counterpart (ignored)'
    required: true
    default: "legacy,ignored"
  irregular_schemas:
    description: 'The schemas which leverage fallback prefix'
    required: true
    default: "scratch,test"
runs:
  using: "composite"
  steps:
    - name: Checkout Repo
      uses: actions/checkout@v2.3.4
    - name: Run Table Checks
      shell: bash
      run: |
        # Setup
        echo "Before script:"
        pwd
        ls -la
        mkdir -p ~/.dbt
        cp ${{ inputs.DBT_PROFILE_FILE }} ~/.dbt/profiles.yml
        mkdir -p secrets
        curr_dir=$(pwd)
        bq_keyfile="$curr_dir/secrets/bq_keyfile.json"
        echo ${{ inputs.GCP_TOKEN }} > $bq_keyfile
        export GOOGLE_APPLICATION_CREDENTIALS=$bq_keyfile
        source setup.sh ${{ inputs.WORK_DIR }}
        echo "After script:"
        cd /home/runner/work/_actions/actions/
        pwd
        ls -la
        cd /home/runner/work/_actions/org-not-included/dbt_table_diff/v23
        pwd
        ls -la
        gh_keyfile="secrets/gh_keyfile.json"
        echo -n "${{ inputs.GH_TOKEN }}" > $gh_keyfile

        # Grab Changed files
        output_file="$(pwd)/target/test_results.txt"
        echo "python3 -m py-github-helper -o ${{ inputs.GH_ORG }} -r ${{ inputs.GH_REPO }} -l ${{ inputs.PR_NUMBER }} -c get_files_changed_during_pr -e '{}'"
        modified_files=$(python3 -m py-github-helper -o ${{ inputs.GH_ORG }} -r ${{ inputs.GH_REPO }} -l ${{ inputs.PR_NUMBER }} -c get_files_changed_during_pr -e '{}')
        pretty_file_names=$(python3 helpers/run_sql_checks.py --files "${modified_files}" --manifest_file ${{ inputs.manifest_file }} --project_id ${{ inputs.project_id }} --keyfile_path $bq_keyfile --ignored_schemas ${{ inputs.ignored_schemas }} --irregular_schemas ${{ inputs.irregular_schemas }} --dev_prefix ${{ inputs.dev_prefix }} --prod_prefix ${{ inputs.prod_prefix }} --fallback_prefix ${{ inputs.fallback_prefix }} --output_file $output_file)
        
        # If our SQL Checks Returned any Results, add them as comment
        if [[ -f $output_file && -s $output_file ]]
        then
          comment=$(cat $output_file)
        # Otherwise list all the files changed in PR
        else
          comment="**No Results to show**\\n Relevant Files Changed:"
          file_array=($(echo "$pretty_file_names" | tr ' ' '\n'))
          for mod_file_name in "${file_array[@]}"
          do
            comment="${comment}\\n\\t- ${mod_file_name}"
          done
        fi

        # Add comment on Pull Request
        python3 -m py-github-helper -o ${{ inputs.GH_ORG }} -r ${{ inputs.GH_REPO }} -l ${{ inputs.PR_NUMBER }} -c add_comment -e '{"message": "'"$comment"'"}'
